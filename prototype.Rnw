% Define knitr options
% !Rnw weave = knitr
% Set global chunk options
<<knitr_setup,include=FALSE,cache=FALSE>>=
library(knitr)
opts_chunk$set(prompt=TRUE,comment=NA, highlight=FALSE, message=FALSE, warning=FALSE, size='scriptsize', fig.width=4, fig.height=4)
options(width=60, dev='pdf')
thm <- knit_theme$get("acid")
knit_theme$set(thm)
@


% Define document options
\documentclass[10pt]{beamer}
\mode<presentation>
\usetheme{AnnArbor}
% \usecolortheme{whale}
% Uncover everything in a step-wise fashion
% \beamerdefaultoverlayspecification{<+->}
% amsmath package for math symbols
% \usepackage{amsmath}
\usepackage[latin1]{inputenc}
\usepackage{hyperref}
\usepackage{fancybox}
\usepackage{url}
\usepackage[backend=bibtex,style=alphabetic]{biblatex} % bibstyle=numeric
% \bibliographystyle{amsalpha} % doesn't work
\addbibresource{FRE6811_bib.bib}
% \addbibresource[location=remote]{http://www.citeulike.org/user/jerzyp}
\renewcommand\bibfont{\footnotesize}
\renewcommand{\pgfuseimage}[1]{\scalebox{0.75}{\includegraphics{#1}}} % scale bib icons
\setbeamertemplate{bibliography item}[text] % set bib icons
% \setbeamertemplate{bibliography item}{} % remove bib icons

% \usepackage{enumerate}
% \let\emph\textbf
% \let\alert\textbf
% Define colors for hyperlinks
\definecolor{links}{HTML}{2A1B81}
\hypersetup{colorlinks=true,linkcolor=,urlcolor=links}
% Make url text footnotesize
\renewcommand\UrlFont{\footnotesize}
% Make institute text italic and small
\setbeamerfont{institute}{size=\small,shape=\itshape,bg=red,fg=red}
\setbeamerfont{date}{size=\small}
\setbeamerfont{block title}{size=\normalsize} % shape=\itshape
\setbeamerfont{block body}{size=\footnotesize}


% Title page setup
\title[Prototype Slides]{Prototype Slides}
\subtitle{FRE6811 Financial Software Laboratory, Spring 2014}
% \subject{Getting Started With R}
\institute[NYU Polytechnic]{NYU Polytechnic School of Engineering}
\titlegraphic{\includegraphics[scale=0.8]{engineering_long_color}}
\author{Jerzy Pawlowski}
% \email{jp3900@poly.edu}
\date{January 27, 2014}
% \date{\today}
% \pgfdeclareimage[height=0.5cm]{university-logo}{engineering_long_white}
% \logo{\pgfuseimage{engineering_long_white}}


%%%%%%%%%%%%%%%
\begin{document}


%%%%%%%%%%%%%%%
\maketitle


%%%%%%%%%%%%%%%
\section{Environments in $R$}


%%%%%%%%%%%%%%%
\subsection{\secname}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Environments consist of a \emph{frame} (a set of symbol-value pairs) and an \emph{enclosure} (a pointer to an enclosing environment),
      \vskip1ex
      There are three system environments:
      \begin{itemize}
        \item \verb|globalenv()| the user's workspace,
        \item \verb|baseenv()| the environment of the base package,
        \item \verb|emptyenv()| the only environment without an enclosure,
      \end{itemize}
      Environments form a tree structure of successive enclosures, with the empty environment at its root,
      \vskip1ex
      Packages have their own environments,
      \vskip1ex
      The enclosure of the base package is the empty environment,
    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
baseenv()  # get base environment
globalenv()  # get global environment
environment()  # get current environment
class(environment())  # get environment class
n.globvar <- 1  # define variable in current environment
ls(environment())  # get objects in current environment

env.new <- new.env()  # create new environment
parent.env(env.new)  # get calling environment of new environment
assign("new.var1", 3, envir=env.new)  # assign Value to Name
env.new$new.var2 <- 11  # create object in new environment
ls(env.new)  # get objects in new environment
ls(environment())  # get objects in current environment
env.new$new.var1  # environments are subset like lists
env.new[['new.var1']]  # environments are subset like lists
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The $R$ Search Path}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      $R$ evaluates variables using the search path, a series of environments:
      \begin{itemize}
        \item global environment,
        \item package environments,
        \item base environment,
      \end{itemize}
      The function \verb|search()| returns the current search path for $R$ objects,
      \vskip1ex
      The function \verb|attach()| attaches objects to the search path,
      \vskip1ex
      This allows referencing variables by their names alone, rather than as components of objects,
      \vskip1ex
      The function \verb|detach()| detaches objects from the search path,
      \begin{block}{\color{red}{Rule of Thumb}}
        Be very careful with using \verb|attach()|,
        \vskip1ex
        Make sure to \verb|detach()| objects once they're not needed,
      \end{block}

    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
search()  # get search path for R objects
loadedNamespaces()
l.var <- list('flowers'=c('rose', 'daisy', 'tulip'),  # create a list
                        'trees'=c('pine', 'oak', 'maple'))
l.var$trees
attach(l.var)
trees
search()  # get search path for R objects
detach(l.var)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Package Namespaces}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      When a package is loaded then its environment is added to the search path,
      \vskip1ex
      To avoid naming conflicts, packages have \emph{namespaces},
      \vskip1ex
      Package objects have different search paths than other objects,
      \vskip1ex
      The search path for package objects starts in the package namespace, then the global environment and then finally the regular search path,
      \vskip1ex
      This way references to objects in the package are resolved to the package, and they're not masked by objects of the same name in other environments,
      \vskip1ex
      If a function name is called alone then $R$ displays the function code,

    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
search()  # get search path for R objects
library("MASS")  # load package 'MASS'
search()  # get search path for R objects
select  # look at primitive function code from package 'MASS'
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\section{Functions}


%%%%%%%%%%%%%%%
\subsection{\secname \hskip0.5em in $R$}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      $R$ functions have three components: 
      \begin{itemize}
        \item a list of formal arguments,
        \item a body containing $R$ code,
        \item an environment,
      \end{itemize}
      An $R$ function plus its environment is referred to as a function closure,
      \vskip1ex
      Formal arguments can be matched to actual arguments by position or by name,
      \vskip1ex
      Formal arguments can have default values so that when actual arguments are missing then their default values are used,
      \vskip1ex
      The function body doesn't require a return statement, since by default $R$ functions return the last evaluated statement,

    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
MyFunc <- function(n.var1=2, n.var2=1) {  # define function MyFunc
# default values can be specified in the argument list
  n.var1 + 2*n.var2
# the function returns the last evaluated statement
}  # end MyFunc
MyFunc(n.var1=3, n.var2=2)  # match arguments by name
MyFunc(3, 2)  # match arguments by position
MyFunc()  # use default values of arguments
# define function that uses enclosure environment
MyFunc <- function(n.var1=2, n.var2=1) {
# default values can be specified in the argument list
  n.var1 + 2*n.var2 + n.globvar
# the function returns the last evaluated statement
}  # end MyFunc
MyFunc(3, 2)  # n.globvar doesn't exist yet!
n.globvar <- 10
MyFunc(3, 2)  # now works
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Argument Lazy Evaluation}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Arguments in $R$ functions are evaluated \emph{lazily} i.e. only as needed, 
      \vskip1ex
      If the function body doesn't evaluate an argument, then the function won't throw an error, even if the argument is missing, 

    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
MyFunc <- function(n.var1, n.var2) {  # define function MyFunc
  2*n.var1  # just multiply first argument
}  # end MyFunc
MyFunc(3, 2)  # match arguments by position
MyFunc(3)  # second argument was never evaluated!
MyFunc <- function(n.var1, n.var2) {  # define function MyFunc
  cat(n.var1, '\n')  # write to output
  cat(n.var2)  # write to output
}  # end MyFunc
MyFunc(3, 2)  # match arguments by position
MyFunc(3)  # first argument written to output
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The '...' Function Argument}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The '...' argument represents additional unknown arguments, that may be passed on to another nested function,
      \vskip1ex
      The '...' argument is also used when the number of arguments isn't known in advance,
      \vskip1ex
      Any arguments that appear after '...' in the argument list cannot be partially matched,
    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
MySum <- function(n.var1=2, n.var2=1, ...) {  # define function MySum
# default values can be specified in the argument list
  n.var1 + 2*n.var2 + sum(...)
# the function returns the last evaluated statement
}  # end MySum
MySum(3, 2)  # match arguments by position
MySum(3, 2, 5, 8)  # extra arguments
MySum()  # use default value of arguments
args(paste)  # function 'paste' can take many arguments
paste('a', 'b', sep = ':')  # match arguments by name
paste('a', 'b', se = ':')  # partial name matching fails!
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Function Environments}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      When a function is called, a new \emph{evaluation environment} is created,
      \vskip1ex
      The \emph{evaluation environment} contains the function arguments and locally defined variables,
      \vskip1ex
      The enclosure of the \emph{evaluation environment} is the environment where the function was defined (the global environment for functions defined in the workspace),
      \vskip1ex
      Functions defined in packages with namespaces have the package namespace as their enclosure,
    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
n.globvar <- 1  # define a global variable
ls(environment())  # get all variables in environment
MyFunc <- function() {  # function for exploring environments
  n.locvar <- 1  # define a local variable
  cat('objects in parent environment:', '\t', 
      ls(parent.env(environment())), '\n')
  cat('objects in function environment:', '\t', 
      ls(environment()), '\n')
  cat('this is the parent environment:')
  parent.env(environment())  # return parent environment
}  # end MyFunc
MyFunc()
environment(MyFunc)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Function Scope}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      A \emph{free} variable is a variable that's not included in the \emph{evaluation environment},
      \vskip1ex
      Scoping rules determine how \emph{free} variables are evaluated,
      \vskip1ex
      By default $R$ uses \emph{lexical} (\emph{static}) scoping, which means that variables are first evaluated in the \emph{evaluation environment}, then in the enclosing environment in which the function was \emph{defined}, and so on,
      \vskip1ex
      \emph{Dynamic} scoping means that variables are evaluated in the calling environment from which the function was \emph{called},
      \vskip1ex
      The standard assignment operator \verb|"<-"| creates a variable in the \emph{evaluation environment},
      \vskip1ex
      The special assignment operator \verb|"<<-"| modifies or creates a variable in the \emph{enclosing environment},

    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE>>=
rm(list=ls())
n.globvar <- 1  # define a global variable
MyFunc <- function() {  # function for exploring scope
  n.locvar <- 1  # define a local variable
  new.globvar <<- 11  # define a global variable
  cat('objects in parent environment:', '\t', 
      ls(parent.env(environment())), '\n')
  cat('objects in function environment:', '\t', 
      ls(environment()), '\n')
  cat('this is n.globvar:', '\t', n.globvar, '\n')
  n.globvar <- 10  # re-define the global variable
  cat('this is re-defined n.globvar:', '\t', n.globvar, '\n')
}  # end MyFunc
MyFunc()
n.globvar  # global variable is restored
new.globvar  # new.globvar is preserved
n.locvar  # local variable is gone!
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Function for Calculating Moments}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      $R$ provides an easy way to write functions,
      \vskip1ex
      Function arguments can be matched by position or by name,
      \vskip1ex
      If the function arguments are missing then the default value is used,
      \vskip1ex
      Functions return the value of the last expression that is evaluated,
      \vskip1ex
      If a function name is called alone then $R$ displays the function code,
    \column{0.7\textwidth}
      \vspace{-1em}
        <<echo=4:30,tidy=FALSE>>=
rm(list=ls())
par(oma=c(1, 1, 1, 1), mgp=c(2, 1, 0), mar=c(5, 1, 1, 1), cex.lab=0.8, cex.axis=1.0, cex.main=0.8, cex.sub=0.5)
set.seed(1121)  # initialize the random number generator
ts.rets <- diff(log(EuStockMarkets))[, 1]  # DAX returns
# define function CalcSkew to calculate the skew
CalcSkew <- function(ts.data=rnorm(1000)) {  # default is normal
# Calculates the skew of a time series of returns.
  i.num <- length(ts.data)  # number of observations
  n.mean <- mean(ts.data)
  n.sd <- sd(ts.data)
# the last statement is what is returned
  i.num*sum(((ts.data - n.mean)/n.sd)^3)/((i.num-1)*(i.num-2))
}  # end CalcSkew
# calculate skewness of DAX returns
CalcSkew(ts.data=ts.rets)  # match arguments by name
CalcSkew(ts.rets)  # match arguments by position
CalcSkew()  # use default value of arguments
CalcSkew  # show the function code
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\section{Regression}


%%%%%%%%%%%%%%%
\subsection{\secname\hskip0.5em Example}
\begin{frame}[fragile,t]{Simple \subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      \verb|datasets| is a base package containing various datasets, for example \verb|EuStockMarkets|,

    \column{0.7\textwidth}
      \vspace{-1em}
        <<echo=2:30,tidy=FALSE,fig.show='hide'>>=
rm(list=ls())
set.seed(1121)  # initialize random number generator
v.xvar <- 0.1*1:30  # independent variable
v.yvar <- 3 + 2*v.xvar + rnorm(30)  # dependent variable plus noise
lm.simp <- lm(v.yvar ~ v.xvar)  # perform regression
summary(lm.simp)  # regression summary
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{Plotting a \secname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      \verb|datasets| is a base package containing various datasets, for example \verb|EuStockMarkets|,

        <<simp_reg,echo=2:30,tidy=FALSE,fig.show='hide'>>=
rm(list=ls())
set.seed(1121)  # initialize random number generator
v.xvar <- 0.1*1:30
v.yvar <- 3 + 2*v.xvar + rnorm(30)
lm.simp <- lm(v.yvar ~ v.xvar)  # perform regression
# set plot paramaters - margins and font scale
par(oma=c(1, 1, 1, 1))  # set outer margins
par(mgp=c(2, 1, 0))  # axis title and labels
par(mar=c(5, 3, 1, 1), cex.lab=0.8, 
    cex.axis=0.8, cex.main=0.8, cex.sub=0.5)
plot(v.yvar ~ v.xvar)  # plot scatterplot
title(main="Simple Regression", line=-1)
abline(lm.simp, col="red")  # add reg line
      @

    \column{0.5\textwidth}
      \vspace{-1em}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/simp_reg}
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Homework Assignment}
\begin{frame}[t]{\subsecname}

\begin{block}{Required}
  \begin{itemize}
    \item Create a function for calculating the kurtosis of a time series of returns,
    \item Using this function calculate the kurtosis of DAX returns, and of t-distribution returns with four degrees of freedom (use the same number of data points in both cases),
    \item Plot the probability density of DAX returns together with t-distribution returns with four degrees of freedom on a single plot,
  \end{itemize}
\end{block}
\pause

\begin{block}{Recommended}
  \begin{itemize}
    \item Read chapters 4, 5, 10: \fullcite{website:rintro}
  \end{itemize}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Additional Reading}
\begin{frame}[t]{\subsecname}

Download $R$ Interpreter from $CRAN$ (Comprehensive $R$ Archive Network)\\
\hskip1em\url{http://cran.us.r-project.org}\\
\vskip4ex
Download $RStudio$ IDE (Integrated Development Environment)\\
\hskip1em\url{http://www.rstudio.com/ide}\\
\vskip4ex

\end{frame}


\end{document}
